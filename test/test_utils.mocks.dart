// Mocks generated by Mockito 5.4.4 from annotations
// in todo/test/test_utils.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter_bloc/flutter_bloc.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo/data/repositories/task_repository.dart' as _i7;
import 'package:todo/domain/entities/task.dart' as _i9;
import 'package:todo/domain/usecases/add_task.dart' as _i2;
import 'package:todo/domain/usecases/delete_task.dart' as _i3;
import 'package:todo/domain/usecases/get_tasks.dart' as _i5;
import 'package:todo/domain/usecases/update_task.dart' as _i4;
import 'package:todo/presentation/blocs/task_bloc.dart' as _i10;
import 'package:todo/presentation/blocs/task_event.dart' as _i11;
import 'package:todo/presentation/blocs/task_state.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAddTask_0 extends _i1.SmartFake implements _i2.AddTask {
  _FakeAddTask_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteTask_1 extends _i1.SmartFake implements _i3.DeleteTask {
  _FakeDeleteTask_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateTask_2 extends _i1.SmartFake implements _i4.UpdateTask {
  _FakeUpdateTask_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTasks_3 extends _i1.SmartFake implements _i5.GetTasks {
  _FakeGetTasks_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskState_4 extends _i1.SmartFake implements _i6.TaskState {
  _FakeTaskState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i7.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> addTask(_i9.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateTask(_i9.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i9.Task>> getTasks() => (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
        ),
        returnValue: _i8.Future<List<_i9.Task>>.value(<_i9.Task>[]),
      ) as _i8.Future<List<_i9.Task>>);
}

/// A class which mocks [TaskBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskBloc extends _i1.Mock implements _i10.TaskBloc {
  MockTaskBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AddTask get addTask => (super.noSuchMethod(
        Invocation.getter(#addTask),
        returnValue: _FakeAddTask_0(
          this,
          Invocation.getter(#addTask),
        ),
      ) as _i2.AddTask);

  @override
  _i3.DeleteTask get deleteTask => (super.noSuchMethod(
        Invocation.getter(#deleteTask),
        returnValue: _FakeDeleteTask_1(
          this,
          Invocation.getter(#deleteTask),
        ),
      ) as _i3.DeleteTask);

  @override
  _i4.UpdateTask get updateTask => (super.noSuchMethod(
        Invocation.getter(#updateTask),
        returnValue: _FakeUpdateTask_2(
          this,
          Invocation.getter(#updateTask),
        ),
      ) as _i4.UpdateTask);

  @override
  _i5.GetTasks get getTasks => (super.noSuchMethod(
        Invocation.getter(#getTasks),
        returnValue: _FakeGetTasks_3(
          this,
          Invocation.getter(#getTasks),
        ),
      ) as _i5.GetTasks);

  @override
  _i6.TaskState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTaskState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.TaskState);

  @override
  _i8.Stream<_i6.TaskState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i6.TaskState>.empty(),
      ) as _i8.Stream<_i6.TaskState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i11.TaskEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i11.TaskEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i6.TaskState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i11.TaskEvent>(
    _i12.EventHandler<E, _i6.TaskState>? handler, {
    _i12.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i12.Transition<_i11.TaskEvent, _i6.TaskState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void onChange(_i12.Change<_i6.TaskState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
